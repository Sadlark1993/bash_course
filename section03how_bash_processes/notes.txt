################## Overview #####################3

steps:
1 - Tokenization:
    -> quoting: separates tokens in words and operators:
      - words: don't contain unquoted operators;
      - operators: contain at least one...

2 - Command Identification
  -> breaks the command line up into either simple or compound commands
    - simple commands: the commands we've ben using so far (echo, tar...)
      -> a bunch of individual words;
      -> the first word is the command name;
      -> all the other words are arguments to that command.
    
    - compound commands: provides bash with its programming constructs, such as loops, conditionals and etc...

3 - Expansions;

4 - Quote Removal;

5 - Redirection;

finally, bash will execute the command line with what is left over.

############## Quoting ################

- Three quoting methods: backslashes, single quotes and double quotes;
- quoting is removing the meaning of specias characteres, so they can be intepreted literally by the shell;

the three types of quoting:

- backslashes: Removes special meaning from next character;
- single quotes: Removes special meaning from all characters inside;
- double quotes: Removes special meaning from all characters inside except for $ and backticks (`).


################### Tokenization ###################

- Two types of tokens: words and operators;
- operators: contain at least one unquoted metacharacters
- Two types of operators: control and redirectional;

- metacharacters:
  -> |
  -> &
  -> ;
  -> ()
  -> <>
  -> space, tab, new line

  example: echo $name > out.txt
  words: echo, $name, out.txt
  operators: >


################### Command Identification ###################

1. Simple commands:

  echo 1 2 3

echo: command name
1 2 3: individual arguments

 - All simple commands are terminated by a controll operator (such as new line or ;)
 - One command: echo a b c echo 1 2 3
 - Two commands: echo a b c ; echo 1 2 3
 - One command: echo $name > out  #(the operator '>' is a redirectional operator, not a control operator such as ';')

2. Compound commands
  - are bash's programming constructs;
  - each compound command starts with the reserved word and is terminated by a corresponding reserved word;


################### Expansions ###################

 - 4 Stages of Expansions:
    1. Brace Expansion;

    2.:
      * Parameter Expansion;
      * Arithmetic Expansion;
      * Command Substitution;
      * Tilde Expansion;

    3. Word Splitting;

    4. Globbing 

  # The order that bash processes expansions is the same above.
  # so, this will not work: 'x = 10; echo {1..$x}', cuz when bash process the brace exp., the value of $x is unknown.


################### Word Splitting ###################

 - Word splitting is only performed on the results of unquoted:
  * Parameter expansions;
  * Command Substitutions;
  * Arithmetc expansions;

# print content of IFS variable on a visible form:
echo "${IFS@Q}" #did't work in my shell.

# this script will create 5 folders
numbers = 1 2 3 4 5
touch $numbers

# this script will create only one folder
numbers = 1,2,3,4,5
touch $numbers

# this script will create 5 folders cuz we've set ',' as the value of IFS variable
IFS = ','
numbers = 1,2,3,4,5
touch $numbers

# this script will create only 1 folders cuz we've set ',' as the value of IFS variable
IFS = ','
numbers = 1 2 3 4 5
touch $numbers